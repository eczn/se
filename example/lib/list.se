(define (list a . b)
    (if (null? a)
        null
        (cons a (apply list b))))

;; for-each a list
(define (for-each fn list)
    (define (run-lr l r) r)
    (if (null? list)
        null
        (run-lr (fn (car list))
            (for-each fn (cdr list)))))

(define (for-each-log lst)
    (for-each log lst))

;; map a list
(define (map fn list)
    (if (null? list)
        null
        (cons
            (fn (car list))
            (map fn (cdr list)))))

;; nth of a list
(define (list-ref items n)
    (if (= n 0)
        (car items)
        (list-ref (cdr items) (- n 1))))

;; length of a list
(define (length items)
    (if (null? items)
        0
        (+ 1 (length (cdr items)))))

;; accumulate
(define (accumulate op initial sequence)
    (if (null? sequence)
        initial
        (op (car sequence)
            (accumulate op initial (cdr sequence)))))

;; list append
(define (append seq1 seq2)
    (accumulate cons seq2 seq1))

;; fold-right
(define fold-right accumulate)

;; fold-left
(define (fold-left op initial seq)
    (define (iter result rest)
        (if (null? rest)
            result
            (iter (op result (car rest))
                  (cdr rest))))
    (iter initial seq))
